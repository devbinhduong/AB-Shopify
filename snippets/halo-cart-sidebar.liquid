<link rel="stylesheet" href="{{ 'component-quick-cart.css' | asset_url }}" media="print" onload="this.media='all'">
<noscript>{{ 'component-quick-cart.css' | asset_url | stylesheet_tag }}</noscript>
<div class="halo-sidebar halo-sidebar-right halo-cart-sidebar" id="halo-cart-sidebar">
    <button type="button" class="halo-sidebar-close button-effect" data-close-cart-sidebar aria-label="{{ 'general.common.close' | t }}">{% render 'icon-close' %} {{ 'general.common.close' | t }}</button>
    <div class="halo-sidebar-header text-left">
		<span class="title">
			{{ 'sections.cart.my_cart' | t }}
			<span class="cartCount" data-cart-count>{{ cart.item_count }}</span>
		</span>
	</div>
    <div class="halo-sidebar-wrapper custom-scrollbar {{cart.items}}">
		{% comment %} count down {% endcomment %}
		 <tb-timer class="CartReservationCountdown" style="display: block;">
			<div style="display: block;">
				<span>Dein Warenkorb ist für</span>
				<strong data-timer="">09:59</strong>
				<span>reserviert.</span>
			</div>

			<div style="display: none;"><strong>Reservierung abgelaufen.</strong> Gegebenenfalls nicht mehr alles verfügbar.</div>
		</tb-timer>
      	{%- if settings.show_calculator_free_shipping_message -%}
          <div class="previewCartMessage">{% render 'free-shipping-component' %}</div>
        {%- endif -%}
		<cart-coupon-discount data-is-sidebar="true">
			<template data-discount-icon>{% render 'icon-discount' %}</template>
			<template data-discounted-price-template>
				<span class="previewCartItem-saving-price"><s class="before-discount-price" data-original-price-display>{{ item.original_price | money }}</s><span class="discounted-price" data-current-price-display>{{ item.final_price | money }}</span></span> 
			</template>
			<div class="previewCart-wrapper"></div>
		</cart-coupon-discount>
  	</div>
</div>
<script src="{{ 'halo-toolcart.js' | asset_url }}" defer="defer"></script>

<script>
document.addEventListener('DOMContentLoaded', function () {
  const timerElement = document.querySelector('[data-timer]');
  const expiredText = document.querySelector('tb-timer > div:nth-child(2)');
  const countdownWrapper = document.querySelector('tb-timer > div:nth-child(1)');

  const STORAGE_KEY = 'cart_timer_start';
  const COUNTDOWN_MINUTES = 10;

  function getMidnightTimestamp() {
    const now = new Date();
    const midnight = new Date(now);
    midnight.setHours(24, 0, 0, 0);
    return midnight.getTime();
  }

  // Function to save start time and reset date
  function initializeTimer() {
    const now = Date.now();
    const expireAt = now + COUNTDOWN_MINUTES * 60 * 1000;

    localStorage.setItem(STORAGE_KEY, JSON.stringify({
      start: now,
      expireAt: expireAt,
      resetAt: getMidnightTimestamp()
    }));

    return expireAt;
  }

  function getSavedTimer() {
    const data = localStorage.getItem(STORAGE_KEY);
    if (!data) return null;
    try {
      return JSON.parse(data);
    } catch {
      return null;
    }
  }

  function clearTimer() {
    localStorage.removeItem(STORAGE_KEY);
  }

  function startCountdown(durationMs) {
    let remaining = durationMs;

    const interval = setInterval(() => {
      remaining -= 1000;

      if (remaining <= 0) {
        clearInterval(interval);
        countdownWrapper.style.display = 'none';
        expiredText.style.display = 'block';
        return;
      }

      const minutes = Math.floor(remaining / 1000 / 60);
      const seconds = Math.floor((remaining / 1000) % 60);
      timerElement.textContent = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
    }, 1000);
  }

  const saved = getSavedTimer();
  const now = Date.now();

  if (!saved || now > saved.resetAt) {
    // No data or new date then initialize again
    const newExpire = initializeTimer();
    startCountdown(newExpire - now);
  } else {
    // Valid data
    if (now >= saved.expireAt) {
      countdownWrapper.style.display = 'none';
      expiredText.style.display = 'block';
    } else {
      startCountdown(saved.expireAt - now);
    }
  }
});
</script>
